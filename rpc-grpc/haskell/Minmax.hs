{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports       #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing       #-}
{-# OPTIONS_GHC -fno-warn-unused-matches       #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Minmax where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
 
data MinMax request response = MinMax{minMaxFind ::
                                      request 'HsGRPC.Normal Minmax.FindRequest Minmax.FindResponse
                                        -> Hs.IO (response 'HsGRPC.Normal Minmax.FindResponse)}
                             deriving Hs.Generic
 
minMaxServer ::
               MinMax HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                 HsGRPC.ServiceOptions -> Hs.IO ()
minMaxServer MinMax{minMaxFind = minMaxFind}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength serverMaxMetadataSize)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler (HsGRPC.MethodName "/MinMax/Find")
                                   (HsGRPC.convertGeneratedServerHandler minMaxFind))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength,
                             optMaxMetadataSize = serverMaxMetadataSize})
 
minMaxClient ::
               HsGRPC.Client ->
                 Hs.IO (MinMax HsGRPC.ClientRequest HsGRPC.ClientResult)
minMaxClient client
  = (Hs.pure MinMax) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/MinMax/Find")))
 
newtype FindRequest = FindRequest{findRequestNumbers ::
                                  Hs.Vector Hs.Float}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named FindRequest where
        nameOf _ = (Hs.fromString "FindRequest")
 
instance HsProtobuf.HasDefault FindRequest
 
instance HsProtobuf.Message FindRequest where
        encodeMessage _
          FindRequest{findRequestNumbers = findRequestNumbers}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.Float) @(HsProtobuf.PackedVec Hs.Float)
                      findRequestNumbers))])
        decodeMessage _
          = (Hs.pure FindRequest) <*>
              (Hs.coerce @(_ (HsProtobuf.PackedVec Hs.Float))
                 @(_ (Hs.Vector Hs.Float))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.Float)
                (HsProtobuf.Single "numbers")
                []
                "")]
 
instance HsJSONPB.ToJSONPB FindRequest where
        toJSONPB (FindRequest f1) = (HsJSONPB.object ["numbers" .= f1])
        toEncodingPB (FindRequest f1) = (HsJSONPB.pairs ["numbers" .= f1])
 
instance HsJSONPB.FromJSONPB FindRequest where
        parseJSONPB
          = (HsJSONPB.withObject "FindRequest"
               (\ obj -> (Hs.pure FindRequest) <*> obj .: "numbers"))
 
instance HsJSONPB.ToJSON FindRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON FindRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema FindRequest where
        declareNamedSchema _
          = do let declare_numbers = HsJSONPB.declareSchemaRef
               findRequestNumbers <- declare_numbers Proxy.Proxy
               let _ = Hs.pure FindRequest <*> HsJSONPB.asProxy declare_numbers
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "FindRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("numbers", findRequestNumbers)]}})
 
data FindResponse = FindResponse{findResponseMin :: Hs.Float,
                                 findResponseMax :: Hs.Float}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named FindResponse where
        nameOf _ = (Hs.fromString "FindResponse")
 
instance HsProtobuf.HasDefault FindResponse
 
instance HsProtobuf.Message FindResponse where
        encodeMessage _
          FindResponse{findResponseMin = findResponseMin,
                       findResponseMax = findResponseMax}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   findResponseMin),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   findResponseMax)])
        decodeMessage _
          = (Hs.pure FindResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Float)
                (HsProtobuf.Single "min")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Float)
                (HsProtobuf.Single "max")
                []
                "")]
 
instance HsJSONPB.ToJSONPB FindResponse where
        toJSONPB (FindResponse f1 f2)
          = (HsJSONPB.object ["min" .= f1, "max" .= f2])
        toEncodingPB (FindResponse f1 f2)
          = (HsJSONPB.pairs ["min" .= f1, "max" .= f2])
 
instance HsJSONPB.FromJSONPB FindResponse where
        parseJSONPB
          = (HsJSONPB.withObject "FindResponse"
               (\ obj ->
                  (Hs.pure FindResponse) <*> obj .: "min" <*> obj .: "max"))
 
instance HsJSONPB.ToJSON FindResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON FindResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema FindResponse where
        declareNamedSchema _
          = do let declare_min = HsJSONPB.declareSchemaRef
               findResponseMin <- declare_min Proxy.Proxy
               let declare_max = HsJSONPB.declareSchemaRef
               findResponseMax <- declare_max Proxy.Proxy
               let _ = Hs.pure FindResponse <*> HsJSONPB.asProxy declare_min <*>
                         HsJSONPB.asProxy declare_max
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "FindResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("min", findResponseMin),
                                                        ("max", findResponseMax)]}})